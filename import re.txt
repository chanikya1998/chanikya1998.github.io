import re
import plotly.graph_objects as go
import dash
import numpy as np
import pandas as pd
from dash import dcc, html
from dateutil import parser

#  I had to split the data up into 3 sheets to load into my IDE sheet 4 has about 100 rows and was used for test data only 
combined_df = pd.read_excel('Call_reports4.xlsx', sheet_name='Sheet4')

# print(combined_df[:5]
# Null values dealt with
combined_df['NurseID'].fillna('PAT', inplace=True)

# parse time format
combined_df['Start Time'] = combined_df['Start Time'].apply(parser.parse)
combined_df['End Time'] = combined_df['End Time'].apply(parser.parse)

combined_df['Start Time'] = pd.to_datetime(combined_df['Start Time'])
combined_df['End Time'] = pd.to_datetime(combined_df['End Time'])


# Adding Missed_phn column Function
def phone_number_missed(combined_df):
    combined_df['Missed_phn'] = ""
    condition = (combined_df['NurseID'] == 'PAT') & (combined_df['Duration'] < 1) & (
            combined_df['Direction'] == 'INBOUND')
    combined_df.loc[condition, 'Missed_phn'] = combined_df['From']
    return combined_df


# ADD Missed_phn to combined_df and return new comb_df1
combined_df1 = phone_number_missed(combined_df)
print(combined_df1[1:30])

# Creation of MCB_dur and NCB
combined_df1['MCB_dur'] = ''
combined_df1['NCB'] = ''


def calculate_mcb_dur_and_ncb(df, missed_phn_col, to_col, start_time_col, end_time_col, mcb_dur_col, ncb_col):
    # Iterate over each row in the DataFrame
    for i, row in df.iterrows():
        missed_phn = row[missed_phn_col]
        end_time = pd.to_datetime(row[end_time_col])

        if pd.notnull(missed_phn):
            # Find the matching 'To' value in the rows below the current row
            matching_rows = df.loc[i + 1:].loc[
                df[to_col].astype(str).apply(lambda x: bool(re.search(r'\(\d+\)', x)) and x.endswith(missed_phn[-11:]))]

            if not matching_rows.empty:
                # Get the row index of the first match
                match_index = matching_rows.index[0]

                # Calculate the duration and assign it to MCB_dur column
                start_time = pd.to_datetime(df.loc[match_index, start_time_col])
                if pd.notnull(start_time) and pd.notnull(end_time):
                    duration = abs(start_time - end_time)
                    df.at[match_index, mcb_dur_col] = duration
                    # Convert total_seconds to "min:sec" format
                    total_seconds = duration.total_seconds()
                    minutes = total_seconds // 60
                    seconds = total_seconds % 60
                    duration_str = f"{int(minutes)}:{int(seconds):02d}"
                    df.at[match_index, mcb_dur_col] = duration_str


            else:
                df.at[i, ncb_col] = 1


# replace data in MCB_dur with np.nan so that we can remove the 1 in the NCB col
combined_df1['MCB_dur'].replace("", np.nan, inplace=True)
# function to remove unnecessary '1' in NCB col
calculate_mcb_dur_and_ncb(combined_df1, 'Missed_phn', 'To', 'Start Time', 'End Time', 'MCB_dur', 'NCB')
for i, row in combined_df1.iterrows():
    missed_phn2 = row['Missed_phn']
    mcb_dur_col2 = row['MCB_dur']
    ncb_col2 = row['NCB']

    if pd.notnull(mcb_dur_col2):
        combined_df1.at[i, 'NCB'] = ' '

combined_df1['MCB_dur'].fillna("", inplace=True)

# Create NurseID & PAT to be able to tell callback duration per Nurse and missed calls per nurse
combo = combined_df1[(combined_df1['NurseID'] == 'PAT') & (combined_df1['MCB_dur'] != '')]
combined_df1.loc[combo.index, 'NurseID'] = combined_df1['To'].astype(str) + '/PAT'
ncb1 = combined_df1[(combined_df1['NurseID'] == 'PAT') & (combined_df1['NCB'] == 1)]
combined_df1.loc[ncb1.index, 'NurseID'] = combined_df1['To'].astype(str) + '/PAT'

print(combined_df1[1:50])

# app building
# Create the Dash app
app = dash.Dash(__name__)
app.layout = html.Div([
    html.H1('Call Analytics Dashboard'),
    # Dropdown menu for NurseID
    dcc.Dropdown(
        id='nurse-dropdown',
        options=[{'label': str(nurse), 'value': nurse} for nurse in combined_df1['NurseID'].unique()],
        value=combined_df1['NurseID'].unique()[0]
    ),

    # Calendar for date selection
    dcc.DatePickerRange(
        id='date-picker',
        start_date=combined_df1['Start Time'].min().date(),
        end_date=combined_df1['End Time'].max().date(),
        display_format='MM-DD-YYYY'
    ),

    # Bar graph for average callback duration
    dcc.Graph(id='avg-callback-graph'),

    # Bar graph for missed calls per nurse
    dcc.Graph(id='missed-calls-graph'),

    # Bar graph for max and min call duration per nurse
    dcc.Graph(id= 'call-duration-graph'),
])


# Callback to update graphs based on dropdown and date picker inputs
@app.callback(
    [
        dash.dependencies.Output('avg-callback-graph', 'figure'),
        dash.dependencies.Output('missed-calls-graph', 'figure'),
        dash.dependencies.Output('call-duration-graph', 'figure'),
    ],
    [
        dash.dependencies.Input('nurse-dropdown', 'value'),
        dash.dependencies.Input('date-picker', 'start_date'),
        dash.dependencies.Input('date-picker', 'end_date'),
    ]
)
def update_graphs(selected_nurse, start_date, end_date):
    filtered_df = combined_df1[combined_df1['NurseID'] == selected_nurse]
    filtered_df = filtered_df[(filtered_df['Start Time'] >= start_date) & (filtered_df['End Time'] <= end_date)]


    # Create the Figure
    avg_callback_fig = go.Figure()

    # Iterate over unique NurseIDs to create traces for each NurseID
    for nurse_id in filtered_df['NurseID'].unique():
        # Filter the DataFrame for the specific NurseID
        nurse_df = filtered_df[filtered_df['NurseID'] == nurse_id]

        # Add the Scatter trace for the NurseID
        avg_callback_fig.add_trace(go.Scatter(
            x=nurse_df['Start Time'],
            y=nurse_df['MCB_dur'],
            mode='markers',
            name=nurse_id,  # Set NurseID as the name for the legend
            marker=dict(size=8, symbol="diamond", line=dict(width=2, color="DarkSlateGrey")),
            hoverinfo='text',  # Show text in hoverinfo
            text=nurse_df['Start Time'].dt.strftime('%Y-%m-%d') + '<br>' +
                 'NurseID: ' + nurse_df['NurseID'] + '<br>MCB_dur: ' + nurse_df['MCB_dur'].astype(str)  # Custom hover info text
        ))

    # Set the layout properties
    avg_callback_fig.update_layout(
        title='Callback Duration by Nurse',
        xaxis_title='Date: Year, Month, Day',
        yaxis_title='Missed Call Back Duration in minutes:seconds',
        legend_title='NurseID'
    )

    # Missed Calls Graph
    missed_calls_fig = go.Figure()

    # Group by 'NurseID' and calculate the total NCB for each nurse
    filtered_df['NCB'] = pd.to_numeric(filtered_df['NCB'], errors='coerce')
    total_ncb_per_nurse = filtered_df.groupby('NurseID')['NCB'].sum()

    missed_calls_fig.add_trace(go.Bar(
        x=total_ncb_per_nurse.index,  # NurseID will be on the x-axis
        y=total_ncb_per_nurse.values,  # Total NCB will be on the y-axis
        name='Missed Calls per NurseID',
        marker_color='red',
    ))

    # Specify the layout of the chart
    missed_calls_fig.update_layout(
        title='Total Missed Calls per Nurse',
        xaxis=dict(title='NurseID'),
        yaxis=dict(title='Total NCB'),
        xaxis_type='category',  # Set the x-axis type to 'category' for categorical data

    )

    # Max and Min call duration graph
    call_duration_fig = go.Figure()

    # Iterate over unique NurseIDs to create bars for each NurseID
    for nurse_id in filtered_df['NurseID'].unique():
        # Filter the DataFrame for the specific NurseID
        nurse_df = filtered_df[filtered_df['NurseID'] == nurse_id]

        # Calculate the max and min MCB_dur for the NurseID
        max_duration = nurse_df['Duration'].max()
        min_duration = nurse_df['Duration'].min()

        # Add the bars for max and min call duration for the NurseID
        call_duration_fig.add_trace(go.Bar(
            x=[f'{nurse_id} - Max', f'{nurse_id} - Min'],
            y=[max_duration, min_duration],
            name=nurse_id,  # Set NurseID as the name for the legend
            marker_color=['green', 'orange'],  # Use different colors for max and min bars
            hoverinfo='text',  # Show text in hoverinfo
            text=[f'{nurse_id} - Max: {max_duration}', f'{nurse_id} - Min: {min_duration}'],  # Display text on bars
        ))

    # Customize the graph layout
    call_duration_fig.update_layout(
        title_text='Max and Min Call Duration per Nurse',
        xaxis_title='NurseID - Max/Min',
        yaxis_title='MCB_dur (mins:sec)',
    )



    return avg_callback_fig, missed_calls_fig, call_duration_fig


if __name__ == '__main__':
    app.run_server(debug=True)